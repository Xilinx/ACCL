# /*******************************************************************************
#  Copyright (C) 2021 Xilinx, Inc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# *******************************************************************************/
[connectivity]
# Define number of kernels and their name
nk=networklayer:1:networklayer_0
nk=ccl_offload:1:ccl_offload_0
nk=hostctrl:1:hostctrl_0
nk=cmac_krnl:1:cmac_0
nk=reduce_sum_half:1:arith_hp_0
nk=reduce_sum_float:1:arith_fp_0
nk=reduce_sum_double:1:arith_dp_0
nk=reduce_sum_int32_t:1:arith_i32_0
nk=reduce_sum_int64_t:1:arith_i64_0
nk=fp_hp_stream_conv:3:downcast_0_0.downcast_0_1.downcast_0_2
nk=hp_fp_stream_conv:3:upcast_0_0.upcast_0_1.upcast_0_2
nk=loopback:1:lb_user_krnl

# Kernels Foorplaning
slr=downcast_0_0:SLR0
slr=downcast_0_1:SLR0
slr=downcast_0_2:SLR0
slr=upcast_0_0:SLR0
slr=upcast_0_1:SLR0
slr=upcast_0_2:SLR0
slr=lb_user_krnl:SLR0
slr=arith_hp_0:SLR0
slr=arith_fp_0:SLR0
slr=arith_dp_0:SLR0
slr=arith_i32_0:SLR0
slr=arith_i64_0:SLR0
slr=ccl_offload_0:SLR0
slr=hostctrl_0:SLR0
slr=networklayer_0:SLR2
slr=cmac_0:SLR2

sp=ccl_offload_0.m_axi_0:HBM[0]
sp=ccl_offload_0.m_axi_1:HBM[0]

# Connect host controllers to CCL Offload
stream_connect=hostctrl_0.cmd:ccl_offload_0.s_axis_call_req
stream_connect=ccl_offload_0.m_axis_call_ack:hostctrl_0.sts

# Connect CCL Offload kernel to UDP Network Kernel
stream_connect=ccl_offload_0.m_axis_eth_tx_data:networklayer_0.S_AXIS_sk2nl:512
stream_connect=networklayer_0.M_AXIS_nl2sk:ccl_offload_0.s_axis_eth_rx_data:512

# Connect UDP Network Kernel to CMAC Kernel
stream_connect=cmac_0.M_AXIS:networklayer_0.S_AXIS_eth2nl
stream_connect=networklayer_0.M_AXIS_nl2eth:cmac_0.S_AXIS


# Some clarifications are necessary for the following:
# Vitis doesnt let us leave streams dangling
# or connected to other streams on the same kernel
# so when we need multiple things attached to the same kernel ports via
# a switch, we fist connect them in a daisy chain
# to the external kernel port.
#
# After system assembly, we can run a script which disconnects
# this arrangement, inserts a AXIS switch on the external 
# kernel streams, and puts required kernels on that switch

# (Temporary) arithmetic connections
stream_connect=ccl_offload_0.m_axis_arith_op:arith_hp_0.in_r
stream_connect=arith_hp_0.out_r:arith_fp_0.in_r
stream_connect=arith_fp_0.out_r:arith_dp_0.in_r
stream_connect=arith_dp_0.out_r:arith_i32_0.in_r
stream_connect=arith_i32_0.out_r:arith_i64_0.in_r
stream_connect=arith_i64_0.out_r:ccl_offload_0.s_axis_arith_res

# (Temporary) caster connections
stream_connect=ccl_offload_0.m_axis_compression0:downcast_0_0.in_r
stream_connect=downcast_0_0.out_r:upcast_0_0.in_r
stream_connect=upcast_0_0.out_r:ccl_offload_0.s_axis_compression0

stream_connect=ccl_offload_0.m_axis_compression1:downcast_0_1.in_r
stream_connect=downcast_0_1.out_r:upcast_0_1.in_r
stream_connect=upcast_0_1.out_r:ccl_offload_0.s_axis_compression1

stream_connect=ccl_offload_0.m_axis_compression2:downcast_0_2.in_r
stream_connect=downcast_0_2.out_r:upcast_0_2.in_r
stream_connect=upcast_0_2.out_r:ccl_offload_0.s_axis_compression2

# Tie off user kernel interface
stream_connect=ccl_offload_0.m_axis_krnl:lb_user_krnl.in
stream_connect=lb_user_krnl.out:ccl_offload_0.s_axis_krnl
