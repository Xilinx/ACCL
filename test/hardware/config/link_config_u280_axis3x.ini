# /*******************************************************************************
#  Copyright (C) 2021 Xilinx, Inc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# *******************************************************************************/

[connectivity]
# Define number of kernels and their name
nk=ccl_offload:3:ccl_offload_0.ccl_offload_1.ccl_offload_2
nk=client_arbiter:3:arb_0.arb_1.arb_2
nk=hostctrl:6:hostctrl_0_0.hostctrl_0_1.hostctrl_1_0.hostctrl_1_1.hostctrl_2_0.hostctrl_2_1
nk=network_krnl:3:network_krnl_0.network_krnl_1.network_krnl_2
nk=reduce_ops:3:arith_0.arith_1.arith_2
nk=hp_compression:9:compression_0_0.compression_0_1.compression_0_2.compression_1_0.compression_1_1.compression_1_2.compression_2_0.compression_2_1.compression_2_2
nk=loopback:3:lb_user_krnl_0.lb_user_krnl_1.lb_user_krnl_2

# Kernels Foorplaning
slr=ccl_offload_0:SLR0
slr=hostctrl_0_0:SLR0
slr=hostctrl_0_1:SLR0
slr=arb_0:SLR0
slr=network_krnl_0:SLR0
slr=compression_0_0:SLR0
slr=compression_0_1:SLR0
slr=compression_0_2:SLR0
slr=arith_0:SLR0
slr=lb_user_krnl_0:SLR0

sp=ccl_offload_0.m_axi_0:HBM[0:5]
sp=ccl_offload_0.m_axi_1:HBM[0:5]

# Kernels Foorplaning
slr=ccl_offload_1:SLR1
slr=hostctrl_1_0:SLR1
slr=hostctrl_1_1:SLR1
slr=arb_1:SLR1
slr=network_krnl_1:SLR1
slr=compression_1_0:SLR1
slr=compression_1_1:SLR1
slr=compression_1_2:SLR1
slr=arith_1:SLR1
slr=lb_user_krnl_1:SLR1

sp=ccl_offload_1.m_axi_0:HBM[6:11]
sp=ccl_offload_1.m_axi_1:HBM[6:11]

# Kernels Foorplaning
slr=ccl_offload_2:SLR2
slr=hostctrl_2_0:SLR2
slr=hostctrl_2_1:SLR2
slr=arb_2:SLR2
slr=network_krnl_2:SLR2
slr=compression_2_0:SLR2
slr=compression_2_1:SLR2
slr=compression_2_2:SLR2
slr=arith_2:SLR2
slr=lb_user_krnl_2:SLR2

sp=ccl_offload_2.m_axi_0:HBM[12:17]
sp=ccl_offload_2.m_axi_1:HBM[12:17]

# Connect host controllers to arbiter to CCL Offload
stream_connect=hostctrl_0_0.cmd:arb_0.cmd_clients_0
stream_connect=hostctrl_0_1.cmd:arb_0.cmd_clients_1
stream_connect=arb_0.cmd_cclo:ccl_offload_0.s_axis_call_req
stream_connect=ccl_offload_0.m_axis_call_ack:arb_0.ack_cclo
stream_connect=arb_0.ack_clients_0:hostctrl_0_0.sts
stream_connect=arb_0.ack_clients_1:hostctrl_0_1.sts

stream_connect=hostctrl_1_0.cmd:arb_1.cmd_clients_0
stream_connect=hostctrl_1_1.cmd:arb_1.cmd_clients_1
stream_connect=arb_1.cmd_cclo:ccl_offload_1.s_axis_call_req
stream_connect=ccl_offload_1.m_axis_call_ack:arb_1.ack_cclo
stream_connect=arb_1.ack_clients_0:hostctrl_1_0.sts
stream_connect=arb_1.ack_clients_1:hostctrl_1_1.sts

stream_connect=hostctrl_2_0.cmd:arb_2.cmd_clients_0
stream_connect=hostctrl_2_1.cmd:arb_2.cmd_clients_1
stream_connect=arb_2.cmd_cclo:ccl_offload_2.s_axis_call_req
stream_connect=ccl_offload_2.m_axis_call_ack:arb_2.ack_cclo
stream_connect=arb_2.ack_clients_0:hostctrl_2_0.sts
stream_connect=arb_2.ack_clients_1:hostctrl_2_1.sts

# Connect CCL Offload kernel to TCP Network Kernel
stream_connect=network_krnl_0.m_axis_tcp_port_status:ccl_offload_0.s_axis_eth_port_status
stream_connect=network_krnl_0.m_axis_tcp_open_status:ccl_offload_0.s_axis_eth_open_status
stream_connect=network_krnl_0.m_axis_tcp_notification:ccl_offload_0.s_axis_eth_notification
stream_connect=network_krnl_0.m_axis_tcp_rx_meta:ccl_offload_0.s_axis_eth_rx_meta
stream_connect=network_krnl_0.m_axis_tcp_rx_data:ccl_offload_0.s_axis_eth_rx_data
stream_connect=network_krnl_0.m_axis_tcp_tx_status:ccl_offload_0.s_axis_eth_tx_status
stream_connect=ccl_offload_0.m_axis_eth_listen_port:network_krnl_0.s_axis_tcp_listen_port
stream_connect=ccl_offload_0.m_axis_eth_open_connection:network_krnl_0.s_axis_tcp_open_connection
stream_connect=ccl_offload_0.m_axis_eth_close_connection:network_krnl_0.s_axis_tcp_close_connection
stream_connect=ccl_offload_0.m_axis_eth_read_pkg:network_krnl_0.s_axis_tcp_read_pkg
stream_connect=ccl_offload_0.m_axis_eth_tx_meta:network_krnl_0.s_axis_tcp_tx_meta
stream_connect=ccl_offload_0.m_axis_eth_tx_data:network_krnl_0.s_axis_tcp_tx_data

stream_connect=network_krnl_1.m_axis_tcp_port_status:ccl_offload_1.s_axis_eth_port_status
stream_connect=network_krnl_1.m_axis_tcp_open_status:ccl_offload_1.s_axis_eth_open_status
stream_connect=network_krnl_1.m_axis_tcp_notification:ccl_offload_1.s_axis_eth_notification
stream_connect=network_krnl_1.m_axis_tcp_rx_meta:ccl_offload_1.s_axis_eth_rx_meta
stream_connect=network_krnl_1.m_axis_tcp_rx_data:ccl_offload_1.s_axis_eth_rx_data
stream_connect=network_krnl_1.m_axis_tcp_tx_status:ccl_offload_1.s_axis_eth_tx_status
stream_connect=ccl_offload_1.m_axis_eth_listen_port:network_krnl_1.s_axis_tcp_listen_port
stream_connect=ccl_offload_1.m_axis_eth_open_connection:network_krnl_1.s_axis_tcp_open_connection
stream_connect=ccl_offload_1.m_axis_eth_close_connection:network_krnl_1.s_axis_tcp_close_connection
stream_connect=ccl_offload_1.m_axis_eth_read_pkg:network_krnl_1.s_axis_tcp_read_pkg
stream_connect=ccl_offload_1.m_axis_eth_tx_meta:network_krnl_1.s_axis_tcp_tx_meta
stream_connect=ccl_offload_1.m_axis_eth_tx_data:network_krnl_1.s_axis_tcp_tx_data

stream_connect=network_krnl_2.m_axis_tcp_port_status:ccl_offload_2.s_axis_eth_port_status
stream_connect=network_krnl_2.m_axis_tcp_open_status:ccl_offload_2.s_axis_eth_open_status
stream_connect=network_krnl_2.m_axis_tcp_notification:ccl_offload_2.s_axis_eth_notification
stream_connect=network_krnl_2.m_axis_tcp_rx_meta:ccl_offload_2.s_axis_eth_rx_meta
stream_connect=network_krnl_2.m_axis_tcp_rx_data:ccl_offload_2.s_axis_eth_rx_data
stream_connect=network_krnl_2.m_axis_tcp_tx_status:ccl_offload_2.s_axis_eth_tx_status
stream_connect=ccl_offload_2.m_axis_eth_listen_port:network_krnl_2.s_axis_tcp_listen_port
stream_connect=ccl_offload_2.m_axis_eth_open_connection:network_krnl_2.s_axis_tcp_open_connection
stream_connect=ccl_offload_2.m_axis_eth_close_connection:network_krnl_2.s_axis_tcp_close_connection
stream_connect=ccl_offload_2.m_axis_eth_read_pkg:network_krnl_2.s_axis_tcp_read_pkg
stream_connect=ccl_offload_2.m_axis_eth_tx_meta:network_krnl_2.s_axis_tcp_tx_meta
stream_connect=ccl_offload_2.m_axis_eth_tx_data:network_krnl_2.s_axis_tcp_tx_data

# Connect tcp kernels in a loop
# this is temporary, the connections will be broken and 
# a switch inserted after BD creation
stream_connect=network_krnl_0.net_tx:network_krnl_1.net_rx
stream_connect=network_krnl_1.net_tx:network_krnl_2.net_rx
stream_connect=network_krnl_2.net_tx:network_krnl_0.net_rx

# arithmetic connections
stream_connect=ccl_offload_0.m_axis_arith_op0:arith_0.in0
stream_connect=ccl_offload_0.m_axis_arith_op1:arith_0.in1
stream_connect=arith_0.out_r:ccl_offload_0.s_axis_arith_res

stream_connect=ccl_offload_1.m_axis_arith_op0:arith_1.in0
stream_connect=ccl_offload_1.m_axis_arith_op1:arith_1.in1
stream_connect=arith_1.out_r:ccl_offload_1.s_axis_arith_res

stream_connect=ccl_offload_2.m_axis_arith_op0:arith_2.in0
stream_connect=ccl_offload_2.m_axis_arith_op1:arith_2.in1
stream_connect=arith_2.out_r:ccl_offload_2.s_axis_arith_res

# caster connections
stream_connect=ccl_offload_0.m_axis_compression0:compression_0_0.in_r
stream_connect=compression_0_0.out_r:ccl_offload_0.s_axis_compression0
stream_connect=ccl_offload_0.m_axis_compression1:compression_0_1.in_r
stream_connect=compression_0_1.out_r:ccl_offload_0.s_axis_compression1
stream_connect=ccl_offload_0.m_axis_compression2:compression_0_2.in_r
stream_connect=compression_0_2.out_r:ccl_offload_0.s_axis_compression2

stream_connect=ccl_offload_1.m_axis_compression0:compression_1_0.in_r
stream_connect=compression_1_0.out_r:ccl_offload_1.s_axis_compression0
stream_connect=ccl_offload_1.m_axis_compression1:compression_1_1.in_r
stream_connect=compression_1_1.out_r:ccl_offload_1.s_axis_compression1
stream_connect=ccl_offload_1.m_axis_compression2:compression_1_2.in_r
stream_connect=compression_1_2.out_r:ccl_offload_1.s_axis_compression2

stream_connect=ccl_offload_2.m_axis_compression0:compression_2_0.in_r
stream_connect=compression_2_0.out_r:ccl_offload_2.s_axis_compression0
stream_connect=ccl_offload_2.m_axis_compression1:compression_2_1.in_r
stream_connect=compression_2_1.out_r:ccl_offload_2.s_axis_compression1
stream_connect=ccl_offload_2.m_axis_compression2:compression_2_2.in_r
stream_connect=compression_2_2.out_r:ccl_offload_2.s_axis_compression2

# Tie off user kernel interface
stream_connect=ccl_offload_0.m_axis_krnl:lb_user_krnl_0.in
stream_connect=lb_user_krnl_0.out:ccl_offload_0.s_axis_krnl

stream_connect=ccl_offload_1.m_axis_krnl:lb_user_krnl_1.in
stream_connect=lb_user_krnl_1.out:ccl_offload_1.s_axis_krnl

stream_connect=ccl_offload_2.m_axis_krnl:lb_user_krnl_2.in
stream_connect=lb_user_krnl_2.out:ccl_offload_2.s_axis_krnl
