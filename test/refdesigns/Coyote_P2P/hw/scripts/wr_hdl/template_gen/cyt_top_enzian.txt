`timescale 1ns / 1ps
	
import lynxTypes::*;

`include "axi_macros.svh"
`include "lynx_macros.svh"

//
// Top Level - Enzian
//
module top (
{% if cnfg.en_net_0 %}
    input  wire[3:0]            gt0_rxp_in,
    input  wire[3:0]            gt0_rxn_in,
    output  wire[3:0]           gt0_txp_out,
    output  wire[3:0]           gt0_txn_out,
    input  wire                 gt0_refclk_p,
    input  wire                 gt0_refclk_n,
{% endif %} 
{% if cnfg.en_net_1 %}
    input  wire[3:0]            gt1_rxp_in,
    input  wire[3:0]            gt1_rxn_in,
    output  wire[3:0]           gt1_txp_out,
    output  wire[3:0]           gt1_txn_out,
    input  wire                 gt1_refclk_p,
    input  wire                 gt1_refclk_n,
{% endif %} 
{% if cnfg.en_dcard %}
    {% if cnfg.ddr_0 %}
    input  wire                 c0_sys_clk_p,
    input  wire                 c0_sys_clk_n,
    output wire                 c0_ddr4_act_n,
    output wire[16:0]           c0_ddr4_adr,
    output wire[1:0]            c0_ddr4_c,
    output wire[1:0]            c0_ddr4_ba,
    output wire[1:0]            c0_ddr4_bg,
    output wire[1:0]            c0_ddr4_cke,
    output wire[1:0]            c0_ddr4_odt,
    output wire[1:0]            c0_ddr4_cs_n,
    output wire[0:0]            c0_ddr4_ck_t,
    output wire[0:0]            c0_ddr4_ck_c,
    output wire[0:0]            c0_ddr4_par,
    output wire                 c0_ddr4_reset_n,
    inout  wire[71:0]           c0_ddr4_dq,
    inout  wire[17:0]           c0_ddr4_dqs_t,
    inout  wire[17:0]           c0_ddr4_dqs_c,
    {% endif %}
    {% if cnfg.ddr_1 %}
    input  wire                 c1_sys_clk_p,
    input  wire                 c1_sys_clk_n,
    output wire                 c1_ddr4_act_n,
    output wire[16:0]           c1_ddr4_adr,
    output wire[1:0]            c1_ddr4_c,
    output wire[1:0]            c1_ddr4_ba,
    output wire[1:0]            c1_ddr4_bg,
    output wire[1:0]            c1_ddr4_cke,
    output wire[1:0]            c1_ddr4_odt,
    output wire[1:0]            c1_ddr4_cs_n,
    output wire[0:0]            c1_ddr4_ck_t,
    output wire[0:0]            c1_ddr4_ck_c,
    output wire[0:0]            c1_ddr4_par,
    output wire                 c1_ddr4_reset_n,
    inout  wire[71:0]           c1_ddr4_dq,
    inout  wire[17:0]           c1_ddr4_dqs_t,
    inout  wire[17:0]           c1_ddr4_dqs_c,
    {% endif %}
    {% if cnfg.ddr_2 %}
    input  wire                 c2_sys_clk_p,
    input  wire                 c2_sys_clk_n,
    output wire                 c2_ddr4_act_n,
    output wire[16:0]           c2_ddr4_adr,
    output wire[1:0]            c2_ddr4_c,
    output wire[1:0]            c2_ddr4_ba,
    output wire[1:0]            c2_ddr4_bg,
    output wire[1:0]            c2_ddr4_cke,
    output wire[1:0]            c2_ddr4_odt,
    output wire[1:0]            c2_ddr4_cs_n,
    output wire[0:0]            c2_ddr4_ck_t,
    output wire[0:0]            c2_ddr4_ck_c,
    output wire[0:0]            c2_ddr4_par,
    output wire                 c2_ddr4_reset_n,
    inout  wire[71:0]           c2_ddr4_dq,
    inout  wire[17:0]           c2_ddr4_dqs_t,
    inout  wire[17:0]           c2_ddr4_dqs_c,
    {% endif %}
    {% if cnfg.ddr_3 %}
    input  wire                 c3_sys_clk_p,
    input  wire                 c3_sys_clk_n,
    output wire                 c3_ddr4_act_n,
    output wire[16:0]           c3_ddr4_adr,
    output wire[1:0]            c3_ddr4_c,
    output wire[1:0]            c3_ddr4_ba,
    output wire[1:0]            c3_ddr4_bg,
    output wire[1:0]            c3_ddr4_cke,
    output wire[1:0]            c3_ddr4_odt,
    output wire[1:0]            c3_ddr4_cs_n,
    output wire[0:0]            c3_ddr4_ck_t,
    output wire[0:0]            c3_ddr4_ck_c,
    output wire[0:0]            c3_ddr4_par,
    output wire                 c3_ddr4_reset_n,
    inout  wire[71:0]           c3_ddr4_dq,
    inout  wire[17:0]           c3_ddr4_dqs_t,
    inout  wire[17:0]           c3_ddr4_dqs_c,
    {% endif %}
{% endif %}
    input  wire[5:0]            ccpi_clk_p,
    input  wire[5:0]            ccpi_clk_n,
    input  wire[1:0]            prgc_clk_p,
    input  wire[1:0]            prgc_clk_n,
    input  wire[N_LANES-1:0]    ccpi_0_rxn,
    input  wire[N_LANES-1:0]    ccpi_0_rxp,
    output wire[N_LANES-1:0]    ccpi_0_txn,
    output wire[N_LANES-1:0]    ccpi_0_txp,
    input  wire                 uart_txd,
    output wire                 uart_rxd,
    input  wire                 uart_cts,
    output wire                 uart_rts,
    output wire                 fmc_prsnt_n
);
	
    // Sys rst
    wire sys_reset;

    // Main clk/rst
    wire uclk;
    wire [0:0] uresetn;
    wire nclk;
    wire [0:0] nresetn;
    wire pclk;
    wire [0:0] presetn;
    wire aclk;
    wire [0:0] aresetn;
    wire mclk; // mb
    wire xclk;
    wire [0:0] xresetn;

    // IRQ
    wire[N_REGIONS-1:0] usr_irq;

    // Static config
    AXI4L axi_cnfg_int ();
    AXI4L axi_cnfg ();

    // Application control
    AXI4L axi_ctrl_main ();
    AXI4L axi_ctrl_int [N_REGIONS] ();
    AXI4L axi_ctrl [N_REGIONS] ();
	
    // Stream to application
    AXI4S axis_dyn_out_int [N_CHAN] ();
    AXI4S axis_dyn_out [N_CHAN] ();

    // Stream from application
    AXI4S axis_dyn_in_int [N_CHAN] ();
    AXI4S axis_dyn_in [N_CHAN] ();

    // Descriptor bypass
    dmaIntf dma_rd_req_int [N_CHAN] ();
    dmaIntf dma_rd_req [N_CHAN] ();
    dmaIntf dma_wr_req_int [N_CHAN] ();
    dmaIntf dma_wr_req [N_CHAN] ();

{% if cnfg.en_tlbf %}
    // TLB mux
    muxIntf #(.N_ID_BITS($clog2(2*N_REGIONS))) mux_tlb ();
    logic done_map;

{% endif %}
{% if cnfg.en_wb %}
    // Writeback
    AXI4S #(.AXI4S_DATA_BITS(32)) axis_wb ();
    metaIntf #(.STYPE(wback_t)) wback ();

{% endif %}
{% if cnfg.en_card %}
    // MEM AXI mm
    AXI4 #(.AXI4_DATA_BITS(AXI_DDR_BITS)) axi_ddr_in [N_MEM_CHAN] ();
		
{% endif %}
    // Lowspeed pins
    logic [2:0] lowspeed_ctrl_0;
    logic [2:0] lowspeed_ctrl_1;

{% if cnfg.en_net_0 %}
    // Network
    metaIntf #(.STYPE(logic[ARP_LUP_REQ_BITS-1:0])) arp_lookup_request_0();
    metaIntf #(.STYPE(logic[ARP_LUP_RSP_BITS-1:0])) arp_lookup_reply_0();
    metaIntf #(.STYPE(logic[IP_ADDR_BITS-1:0])) set_ip_addr_0();
    metaIntf #(.STYPE(logic[BOARD_NUM_BITS-1:0])) set_board_number_0();
    net_stat_t net_stats_0;

    // RDMA setup
    metaIntf #(.STYPE(logic[RDMA_QP_INTF_BITS-1:0])) rdma_0_qp_interface ();
    metaIntf #(.STYPE(logic[RDMA_QP_CONN_BITS-1:0])) rdma_0_conn_interface ();

    // RDMA interface
    metaIntf #(.STYPE(req_t)) rdma_0_rd_req [N_REGIONS] ();
    metaIntf #(.STYPE(req_t)) rdma_0_wr_req [N_REGIONS] ();
    AXI4S axis_rdma_0_rd [N_REGIONS] ();
    AXI4S axis_rdma_0_wr [N_REGIONS] ();

    // RDMA sq
    metaIntf #(.STYPE(rdma_req_t)) rdma_0_sq [N_REGIONS] ();

    // DDR AXI mm network
    AXI4 axi_ddr_tcp_0 ();

    // Offsets
    logic [63:0] ddr_offset_addr_0;

    // TCP/IP
    metaIntf #(.STYPE(tcp_listen_req_t)) tcp_0_listen_req[N_REGIONS]();
    metaIntf #(.STYPE(tcp_listen_rsp_t)) tcp_0_listen_rsp[N_REGIONS]();
    metaIntf #(.STYPE(tcp_open_req_t)) tcp_0_open_req[N_REGIONS]();
    metaIntf #(.STYPE(tcp_open_rsp_t)) tcp_0_open_rsp[N_REGIONS]();
    metaIntf #(.STYPE(tcp_close_req_t)) tcp_0_close_req [N_REGIONS]();
    metaIntf #(.STYPE(tcp_notify_t)) tcp_0_notify [N_REGIONS]();
    metaIntf #(.STYPE(tcp_rd_pkg_t)) tcp_0_rd_pkg [N_REGIONS]();
    metaIntf #(.STYPE(tcp_rx_meta_t)) tcp_0_rx_meta [N_REGIONS]();
    metaIntf #(.STYPE(tcp_tx_meta_t)) tcp_0_tx_meta [N_REGIONS]();
    metaIntf #(.STYPE(tcp_tx_stat_t)) tcp_0_tx_stat [N_REGIONS]();
    AXI4S #(.AXI4S_DATA_BITS(AXI_NET_BITS)) axis_tcp_0_rx [N_REGIONS]();
    AXI4S #(.AXI4S_DATA_BITS(AXI_NET_BITS)) axis_tcp_0_tx [N_REGIONS]();
		
{% endif %}
{% if cnfg.en_net_1 %}
    // Network
    metaIntf #(.STYPE(logic[ARP_LUP_REQ_BITS-1:0])) arp_lookup_request_1();
    metaIntf #(.STYPE(logic[ARP_LUP_RSP_BITS-1:0])) arp_lookup_reply_1();
    metaIntf #(.STYPE(logic[IP_ADDR_BITS-1:0])) set_ip_addr_1();
    metaIntf #(.STYPE(logic[BOARD_NUM_BITS-1:0])) set_board_number_1();
    net_stat_t net_stats_1;
		
    // RDMA setup
    metaIntf #(.STYPE(logic[RDMA_QP_INTF_BITS-1:0])) rdma_1_qp_interface ();
    metaIntf #(.STYPE(logic[RDMA_QP_CONN_BITS-1:0])) rdma_1_conn_interface ();

    // RDMA interface
    metaIntf #(.STYPE(req_t)) rdma_1_rd_req [N_REGIONS] ();
    metaIntf #(.STYPE(req_t)) rdma_1_wr_req [N_REGIONS] ();
    AXI4S axis_rdma_1_rd [N_REGIONS] ();
    AXI4S axis_rdma_1_wr [N_REGIONS] ();

    // RDMA sq
    metaIntf #(.STYPE(rdma_req_t)) rdma_1_sq [N_REGIONS] ();

    // DDR AXI mm network
    AXI4 axi_ddr_tcp_1 ();

    // Offsets
    logic [63:0] ddr_offset_addr_1;

    // TCP/IP
    metaIntf #(.STYPE(tcp_listen_req_t))  tcp_1_listen_req[N_REGIONS]();
    metaIntf #(.STYPE(tcp_listen_rsp_t))  tcp_1_listen_rsp[N_REGIONS]();
    metaIntf #(.STYPE(tcp_open_req_t))  tcp_1_open_req[N_REGIONS]();
    metaIntf #(.STYPE(tcp_open_rsp_t))  tcp_1_open_rsp[N_REGIONS]();
    metaIntf #(.STYPE(tcp_close_req_t))  tcp_1_close_req [N_REGIONS]();
    metaIntf #(.STYPE(tcp_notify_t))  tcp_1_notify [N_REGIONS]();
    metaIntf #(.STYPE(tcp_rd_pkg_t))  tcp_1_rd_pkg [N_REGIONS]();
    metaIntf #(.STYPE(tcp_rx_meta_t))  tcp_1_rx_meta [N_REGIONS]();
    metaIntf #(.STYPE(tcp_tx_meta_t))  tcp_1_tx_meta [N_REGIONS]();
    metaIntf #(.STYPE(tcp_tx_stat_t))  tcp_1_tx_stat [N_REGIONS]();
    AXI4S #(.AXI4S_DATA_BITS(AXI_NET_BITS)) axis_tcp_1_rx [N_REGIONS]();
    AXI4S #(.AXI4S_DATA_BITS(AXI_NET_BITS)) axis_tcp_1_tx [N_REGIONS]();
		 
{% endif %}
{% if cnfg.en_pr %}
    // PR streams
    AXI4S axis_pr();
    AXI4S #(.AXI4S_DATA_BITS(32)) axis_icap [N_REG_PR+1] ();
    
    // PR ICAP
    wire eos;
    wire [31:0] eos_time;
    wire [31:0] icap_out;
    wire icap_avail;
    wire icap_error;
    wire icap_done;
    wire icap_csn;
    wire [31:0] icap_data;
		
{% endif %}	
    // -----------------------------------------------------------------
    // STATIC LAYER 
    // -----------------------------------------------------------------
    design_static inst_int_static (
        .axi_cnfg_araddr(axi_cnfg_int.araddr),
        .axi_cnfg_arprot(axi_cnfg_int.arprot),
        .axi_cnfg_arready(axi_cnfg_int.arready),
        .axi_cnfg_arvalid(axi_cnfg_int.arvalid),
        .axi_cnfg_awaddr(axi_cnfg_int.awaddr),
        .axi_cnfg_awprot(axi_cnfg_int.awprot),
        .axi_cnfg_awready(axi_cnfg_int.awready),
        .axi_cnfg_awvalid(axi_cnfg_int.awvalid),
        .axi_cnfg_bready(axi_cnfg_int.bready),
        .axi_cnfg_bresp(axi_cnfg_int.bresp),
        .axi_cnfg_bvalid(axi_cnfg_int.bvalid),
        .axi_cnfg_rdata(axi_cnfg_int.rdata),
        .axi_cnfg_rready(axi_cnfg_int.rready),
        .axi_cnfg_rresp(axi_cnfg_int.rresp),
        .axi_cnfg_rvalid(axi_cnfg_int.rvalid),
        .axi_cnfg_wdata(axi_cnfg_int.wdata),
        .axi_cnfg_wready(axi_cnfg_int.wready),
        .axi_cnfg_wstrb(axi_cnfg_int.wstrb),
        .axi_cnfg_wvalid(axi_cnfg_int.wvalid),
        .axi_ctrl_main_araddr(axi_ctrl_main.araddr),
        .axi_ctrl_main_arprot(axi_ctrl_main.arprot),
        .axi_ctrl_main_arready(axi_ctrl_main.arready),
        .axi_ctrl_main_arvalid(axi_ctrl_main.arvalid),
        .axi_ctrl_main_awaddr(axi_ctrl_main.awaddr),
        .axi_ctrl_main_awprot(axi_ctrl_main.awprot),
        .axi_ctrl_main_awready(axi_ctrl_main.awready),
        .axi_ctrl_main_awvalid(axi_ctrl_main.awvalid),
        .axi_ctrl_main_bready(axi_ctrl_main.bready),
        .axi_ctrl_main_bresp(axi_ctrl_main.bresp),
        .axi_ctrl_main_bvalid(axi_ctrl_main.bvalid),
        .axi_ctrl_main_rdata(axi_ctrl_main.rdata),
        .axi_ctrl_main_rready(axi_ctrl_main.rready),
        .axi_ctrl_main_rresp(axi_ctrl_main.rresp),
        .axi_ctrl_main_rvalid(axi_ctrl_main.rvalid),
        .axi_ctrl_main_wdata(axi_ctrl_main.wdata),
        .axi_ctrl_main_wready(axi_ctrl_main.wready),
        .axi_ctrl_main_wstrb(axi_ctrl_main.wstrb),
        .axi_ctrl_main_wvalid(axi_ctrl_main.wvalid),
{% for i in range(0, cnfg.n_reg) %}
        .axi_ctrl_{{ i }}_araddr(axi_ctrl_int[{{ i }}].araddr),
        .axi_ctrl_{{ i }}_arprot(axi_ctrl_int[{{ i }}].arprot),
        .axi_ctrl_{{ i }}_arready(axi_ctrl_int[{{ i }}].arready),
        .axi_ctrl_{{ i }}_arvalid(axi_ctrl_int[{{ i }}].arvalid),
        .axi_ctrl_{{ i }}_awaddr(axi_ctrl_int[{{ i }}].awaddr),
        .axi_ctrl_{{ i }}_awprot(axi_ctrl_int[{{ i }}].awprot),
        .axi_ctrl_{{ i }}_awready(axi_ctrl_int[{{ i }}].awready),
        .axi_ctrl_{{ i }}_awvalid(axi_ctrl_int[{{ i }}].awvalid),
        .axi_ctrl_{{ i }}_bready(axi_ctrl_int[{{ i }}].bready),
        .axi_ctrl_{{ i }}_bresp(axi_ctrl_int[{{ i }}].bresp),
        .axi_ctrl_{{ i }}_bvalid(axi_ctrl_int[{{ i }}].bvalid),
        .axi_ctrl_{{ i }}_rdata(axi_ctrl_int[{{ i }}].rdata),
        .axi_ctrl_{{ i }}_rready(axi_ctrl_int[{{ i }}].rready),
        .axi_ctrl_{{ i }}_rresp(axi_ctrl_int[{{ i }}].rresp),
        .axi_ctrl_{{ i }}_rvalid(axi_ctrl_int[{{ i }}].rvalid),
        .axi_ctrl_{{ i }}_wdata(axi_ctrl_int[{{ i }}].wdata),
        .axi_ctrl_{{ i }}_wready(axi_ctrl_int[{{ i }}].wready),
        .axi_ctrl_{{ i }}_wstrb(axi_ctrl_int[{{ i }}].wstrb),
        .axi_ctrl_{{ i }}_wvalid(axi_ctrl_int[{{ i }}].wvalid),
{% endfor %}
        .pclk(pclk),
        .presetn(presetn),
        .nclk(nclk),
        .nresetn(nresetn),
        .aclk(aclk),
        .aresetn(aresetn),	
        .xclk(xclk),
        .xresetn(xresetn),
        .sys_reset(sys_reset)
	);

{% if cnfg.en_dcard %}
    // -----------------------------------------------------------------
    // STATIC DDR LAYER 
    // -----------------------------------------------------------------
    design_ddr inst_int_ddr (
    {% if cnfg.ddr_0 %}
        .c0_ddr4_act_n(c0_ddr4_act_n),
        .c0_ddr4_adr(c0_ddr4_adr),
        .c0_ddr4_c_id(c0_ddr4_c),
        .c0_ddr4_ba(c0_ddr4_ba),
        .c0_ddr4_bg(c0_ddr4_bg),
        .c0_ddr4_ck_c(c0_ddr4_ck_c),
        .c0_ddr4_ck_t(c0_ddr4_ck_t),
        .c0_ddr4_cke(c0_ddr4_cke),
        .c0_ddr4_cs_n(c0_ddr4_cs_n),
        .c0_ddr4_dq(c0_ddr4_dq),
        .c0_ddr4_dqs_c(c0_ddr4_dqs_c),
        .c0_ddr4_dqs_t(c0_ddr4_dqs_t),
        .c0_ddr4_odt(c0_ddr4_odt),
        .c0_ddr4_par(c0_ddr4_par),
        .c0_ddr4_reset_n(c0_ddr4_reset_n),
        .c0_sys_clk_0_clk_n(c0_sys_clk_n),
        .c0_sys_clk_0_clk_p(c0_sys_clk_p),
        .axi_ctrl_ddr_0_araddr(0),
        .axi_ctrl_ddr_0_arready(),
        .axi_ctrl_ddr_0_arvalid(1'b0),
        .axi_ctrl_ddr_0_awaddr(0),
        .axi_ctrl_ddr_0_awready(),
        .axi_ctrl_ddr_0_awvalid(1'b0),
        .axi_ctrl_ddr_0_bready(1'b0),
        .axi_ctrl_ddr_0_bresp(),
        .axi_ctrl_ddr_0_bvalid(),
        .axi_ctrl_ddr_0_rdata(),
        .axi_ctrl_ddr_0_rready(1'b0),
        .axi_ctrl_ddr_0_rresp(),
        .axi_ctrl_ddr_0_rvalid(),
        .axi_ctrl_ddr_0_wdata(0),
        .axi_ctrl_ddr_0_wready(),
        .axi_ctrl_ddr_0_wvalid(1'b0),
	{% endif %}
	{% if cnfg.ddr_1 %}
        .c1_ddr4_act_n(c1_ddr4_act_n),
        .c1_ddr4_adr(c1_ddr4_adr),
        .c1_ddr4_c_id(c1_ddr4_c),
        .c1_ddr4_ba(c1_ddr4_ba),
        .c1_ddr4_bg(c1_ddr4_bg),
        .c1_ddr4_ck_c(c1_ddr4_ck_c),
        .c1_ddr4_ck_t(c1_ddr4_ck_t),
        .c1_ddr4_cke(c1_ddr4_cke),
        .c1_ddr4_cs_n(c1_ddr4_cs_n),
        .c1_ddr4_dq(c1_ddr4_dq),
        .c1_ddr4_dqs_c(c1_ddr4_dqs_c),
        .c1_ddr4_dqs_t(c1_ddr4_dqs_t),
        .c1_ddr4_odt(c1_ddr4_odt),
        .c1_ddr4_par(c1_ddr4_par),
        .c1_ddr4_reset_n(c1_ddr4_reset_n),
        .c1_sys_clk_0_clk_n(c1_sys_clk_n),
        .c1_sys_clk_0_clk_p(c1_sys_clk_p),
        .axi_ctrl_ddr_1_araddr(0),
        .axi_ctrl_ddr_1_arready(),
        .axi_ctrl_ddr_1_arvalid(1'b0),
        .axi_ctrl_ddr_1_awaddr(0),
        .axi_ctrl_ddr_1_awready(),
        .axi_ctrl_ddr_1_awvalid(1'b0),
        .axi_ctrl_ddr_1_bready(1'b0),
        .axi_ctrl_ddr_1_bresp(),
        .axi_ctrl_ddr_1_bvalid(),
        .axi_ctrl_ddr_1_rdata(),
        .axi_ctrl_ddr_1_rready(1'b0),
        .axi_ctrl_ddr_1_rresp(),
        .axi_ctrl_ddr_1_rvalid(),
        .axi_ctrl_ddr_1_wdata(0),
        .axi_ctrl_ddr_1_wready(),
        .axi_ctrl_ddr_1_wvalid(1'b0),
	{% endif %}
	{% if cnfg.ddr_2 %}
        .c2_ddr4_act_n(c2_ddr4_act_n),
        .c2_ddr4_adr(c2_ddr4_adr),
        .c2_ddr4_c_id(c2_ddr4_c),
        .c2_ddr4_ba(c2_ddr4_ba),
        .c2_ddr4_bg(c2_ddr4_bg),
        .c2_ddr4_ck_c(c2_ddr4_ck_c),
        .c2_ddr4_ck_t(c2_ddr4_ck_t),
        .c2_ddr4_cke(c2_ddr4_cke),
        .c2_ddr4_cs_n(c2_ddr4_cs_n),
        .c2_ddr4_dq(c2_ddr4_dq),
        .c2_ddr4_dqs_c(c2_ddr4_dqs_c),
        .c2_ddr4_dqs_t(c2_ddr4_dqs_t),
        .c2_ddr4_odt(c2_ddr4_odt),
        .c2_ddr4_par(c2_ddr4_par),
        .c2_ddr4_reset_n(c2_ddr4_reset_n),
        .c2_sys_clk_0_clk_n(c2_sys_clk_n),
        .c2_sys_clk_0_clk_p(c2_sys_clk_p),
        .axi_ctrl_ddr_2_araddr(0),
        .axi_ctrl_ddr_2_arready(),
        .axi_ctrl_ddr_2_arvalid(1'b0),
        .axi_ctrl_ddr_2_awaddr(0),
        .axi_ctrl_ddr_2_awready(),
        .axi_ctrl_ddr_2_awvalid(1'b0),
        .axi_ctrl_ddr_2_bready(1'b0),
        .axi_ctrl_ddr_2_bresp(),
        .axi_ctrl_ddr_2_bvalid(),
        .axi_ctrl_ddr_2_rdata(),
        .axi_ctrl_ddr_2_rready(1'b0),
        .axi_ctrl_ddr_2_rresp(),
        .axi_ctrl_ddr_2_rvalid(),
        .axi_ctrl_ddr_2_wdata(0),
        .axi_ctrl_ddr_2_wready(),
        .axi_ctrl_ddr_2_wvalid(1'b0),
	{% endif %}
	{% if cnfg.ddr_3 %}
        .c3_ddr4_act_n(c3_ddr4_act_n),
        .c3_ddr4_adr(c3_ddr4_adr),
        .c3_ddr4_c_id(c3_ddr4_c),
        .c3_ddr4_ba(c3_ddr4_ba),
        .c3_ddr4_bg(c3_ddr4_bg),
        .c3_ddr4_ck_c(c3_ddr4_ck_c),
        .c3_ddr4_ck_t(c3_ddr4_ck_t),
        .c3_ddr4_cke(c3_ddr4_cke),
        .c3_ddr4_cs_n(c3_ddr4_cs_n),
        .c3_ddr4_dq(c3_ddr4_dq),
        .c3_ddr4_dqs_c(c3_ddr4_dqs_c),
        .c3_ddr4_dqs_t(c3_ddr4_dqs_t),
        .c3_ddr4_odt(c3_ddr4_odt),
        .c3_ddr4_par(c3_ddr4_par),
        .c3_ddr4_reset_n(c3_ddr4_reset_n),
        .c3_sys_clk_0_clk_n(c3_sys_clk_n),
        .c3_sys_clk_0_clk_p(c3_sys_clk_p),
        .axi_ctrl_ddr_3_araddr(0),
        .axi_ctrl_ddr_3_arready(),
        .axi_ctrl_ddr_3_arvalid(1'b0),
        .axi_ctrl_ddr_3_awaddr(0),
        .axi_ctrl_ddr_3_awready(),
        .axi_ctrl_ddr_3_awvalid(1'b0),
        .axi_ctrl_ddr_3_bready(1'b0),
        .axi_ctrl_ddr_3_bresp(),
        .axi_ctrl_ddr_3_bvalid(),
        .axi_ctrl_ddr_3_rdata(),
        .axi_ctrl_ddr_3_rready(1'b0),
        .axi_ctrl_ddr_3_rresp(),
        .axi_ctrl_ddr_3_rvalid(),
        .axi_ctrl_ddr_3_wdata(0),
        .axi_ctrl_ddr_3_wready(),
        .axi_ctrl_ddr_3_wvalid(1'b0),
	{% endif %}	
    {% for i in range(0, cnfg.n_mem_chan ) %}
        .axi_ddr_in_{{ i }}_araddr(axi_ddr_in[{{ i }}].araddr),
        .axi_ddr_in_{{ i }}_arburst(axi_ddr_in[{{ i }}].arburst),
        .axi_ddr_in_{{ i }}_arcache(axi_ddr_in[{{ i }}].arcache),
        .axi_ddr_in_{{ i }}_arid(axi_ddr_in[{{ i }}].arid),
        .axi_ddr_in_{{ i }}_arlen(axi_ddr_in[{{ i }}].arlen),
        .axi_ddr_in_{{ i }}_arlock(axi_ddr_in[{{ i }}].arlock),
        .axi_ddr_in_{{ i }}_arprot(axi_ddr_in[{{ i }}].arprot),
        .axi_ddr_in_{{ i }}_arqos(axi_ddr_in[{{ i }}].arqos),
        .axi_ddr_in_{{ i }}_arready(axi_ddr_in[{{ i }}].arready),
        .axi_ddr_in_{{ i }}_arregion(axi_ddr_in[{{ i }}].arregion),
        .axi_ddr_in_{{ i }}_arsize(axi_ddr_in[{{ i }}].arsize),
        .axi_ddr_in_{{ i }}_arvalid(axi_ddr_in[{{ i }}].arvalid),
        .axi_ddr_in_{{ i }}_awaddr(axi_ddr_in[{{ i }}].awaddr),
        .axi_ddr_in_{{ i }}_awburst(axi_ddr_in[{{ i }}].awburst),
        .axi_ddr_in_{{ i }}_awcache(axi_ddr_in[{{ i }}].awcache),
        .axi_ddr_in_{{ i }}_awid(axi_ddr_in[{{ i }}].awid),
        .axi_ddr_in_{{ i }}_awlen(axi_ddr_in[{{ i }}].awlen),
        .axi_ddr_in_{{ i }}_awlock(axi_ddr_in[{{ i }}].awlock),
        .axi_ddr_in_{{ i }}_awprot(axi_ddr_in[{{ i }}].awprot),
        .axi_ddr_in_{{ i }}_awqos(axi_ddr_in[{{ i }}].awqos),
        .axi_ddr_in_{{ i }}_awready(axi_ddr_in[{{ i }}].awready),
        .axi_ddr_in_{{ i }}_awregion(axi_ddr_in[{{ i }}].awregion),
        .axi_ddr_in_{{ i }}_awsize(axi_ddr_in[{{ i }}].awsize),
        .axi_ddr_in_{{ i }}_awvalid(axi_ddr_in[{{ i }}].awvalid),
        .axi_ddr_in_{{ i }}_bid(axi_ddr_in[{{ i }}].bid),
        .axi_ddr_in_{{ i }}_bready(axi_ddr_in[{{ i }}].bready),
        .axi_ddr_in_{{ i }}_bresp(axi_ddr_in[{{ i }}].bresp),
        .axi_ddr_in_{{ i }}_bvalid(axi_ddr_in[{{ i }}].bvalid),
        .axi_ddr_in_{{ i }}_rdata(axi_ddr_in[{{ i }}].rdata),
        .axi_ddr_in_{{ i }}_rid(axi_ddr_in[{{ i }}].rid),
        .axi_ddr_in_{{ i }}_rlast(axi_ddr_in[{{ i }}].rlast),
        .axi_ddr_in_{{ i }}_rready(axi_ddr_in[{{ i }}].rready),
        .axi_ddr_in_{{ i }}_rresp(axi_ddr_in[{{ i }}].rresp),
        .axi_ddr_in_{{ i }}_rvalid(axi_ddr_in[{{ i }}].rvalid),
        .axi_ddr_in_{{ i }}_wdata(axi_ddr_in[{{ i }}].wdata),
        .axi_ddr_in_{{ i }}_wlast(axi_ddr_in[{{ i }}].wlast),
        .axi_ddr_in_{{ i }}_wready(axi_ddr_in[{{ i }}].wready),
        .axi_ddr_in_{{ i }}_wstrb(axi_ddr_in[{{ i }}].wstrb),
        .axi_ddr_in_{{ i }}_wvalid(axi_ddr_in[{{ i }}].wvalid),
	{% endfor %}
        .sys_reset(sys_reset),
        .aclk(aclk),
        .aresetn(aresetn)
	);
{% endif %}
	    
    // -----------------------------------------------------------------
    // I/O AND BOARD SPECIFIC
    // -----------------------------------------------------------------

    // Clock Gen
    clk_wiz_0 inst_clk_wiz_0 (
        .clk_in1_n(prgc_clk_n[1]),
        .clk_in1_p(prgc_clk_p[1]),
        .clk_out1(mclk),
        .clk_out2(uclk),
        .clk_out3(nclk),
        .clk_out4(pclk),
        .clk_out5(aclk)
    );

    // ECI
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_out_eci ();
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_in_eci ();
    dmaIntf dma_rd_req_eci ();
    dmaIntf dma_wr_req_eci ();

    eci_top #(
        .NUM_LANES(N_LANES),
        .LANES_GRPS(N_LANES_GRPS)
    ) inst_eci (
        .ccpi_clk_p(ccpi_clk_p),
        .ccpi_clk_n(ccpi_clk_n),
        .ccpi_rxn(ccpi_0_rxn),
        .ccpi_rxp(ccpi_0_rxp),
        .ccpi_txn(ccpi_0_txn),
        .ccpi_txp(ccpi_0_txp),
        .clk_axi(xclk),
        .clk_io(mclk),
        .resetn_axi(xresetn),
        .axil_ctrl_awaddr(axi_ctrl_main.awaddr[35:0]),
        .axil_ctrl_awvalid(axi_ctrl_main.awvalid),
        .axil_ctrl_awready(axi_ctrl_main.awready),
        .axil_ctrl_wdata(axi_ctrl_main.wdata),
        .axil_ctrl_wstrb(axi_ctrl_main.wstrb),
        .axil_ctrl_wvalid(axi_ctrl_main.wvalid),
        .axil_ctrl_wready(axi_ctrl_main.wready),
        .axil_ctrl_bresp(axi_ctrl_main.bresp),
        .axil_ctrl_bvalid(axi_ctrl_main.bvalid),
        .axil_ctrl_bready(axi_ctrl_main.bready),
        .axil_ctrl_araddr(axi_ctrl_main.araddr[35:0]),
        .axil_ctrl_arvalid(axi_ctrl_main.arvalid),
        .axil_ctrl_arready(axi_ctrl_main.arready),
        .axil_ctrl_rdata(axi_ctrl_main.rdata),
        .axil_ctrl_rresp(axi_ctrl_main.rresp),
        .axil_ctrl_rvalid(axi_ctrl_main.rvalid),
        .axil_ctrl_rready(axi_ctrl_main.rready),
        .axis_dyn_out_tdata(axis_dyn_out_eci.tdata),
        .axis_dyn_out_tkeep(axis_dyn_out_eci.tkeep),
        .axis_dyn_out_tlast(axis_dyn_out_eci.tlast),
        .axis_dyn_out_tvalid(axis_dyn_out_eci.tvalid),
        .axis_dyn_out_tready(axis_dyn_out_eci.tready),
        .axis_dyn_in_tdata(axis_dyn_in_eci.tdata),
        .axis_dyn_in_tkeep(axis_dyn_in_eci.tkeep),
        .axis_dyn_in_tlast(axis_dyn_in_eci.tlast),
        .axis_dyn_in_tvalid(axis_dyn_in_eci.tvalid),
        .axis_dyn_in_tready(axis_dyn_in_eci.tready),
        .rd_desc_addr(dma_rd_req_eci.req.paddr[39:0]),
        .rd_desc_len(dma_rd_req_eci.req.len[19:0]),
        .rd_desc_valid(dma_rd_req_eci.valid),
        .rd_desc_ready(dma_rd_req_eci.ready),
        .rd_desc_done(dma_rd_req_eci.rsp.done),
        .wr_desc_addr(dma_wr_req_eci.req.paddr[39:0]),
        .wr_desc_len(dma_wr_req_eci.req.len[19:0]),
        .wr_desc_valid(dma_wr_req_eci.valid),
        .wr_desc_ready(dma_wr_req_eci.ready),
        .wr_desc_done(dma_wr_req_eci.rsp.done)
    );

    // Stage 0
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_out_s0 ();
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_in_s0 ();
    dmaIntf dma_rd_req_s0 ();
    dmaIntf dma_wr_req_s0 ();

    axis_reg_array #(.N_STAGES(N_REG_ECI_S0), .DATA_BITS(ECI_DATA_BITS)) inst_eci_in  (.aclk(xclk), .aresetn(xresetn), .s_axis(axis_dyn_in_s0),   .m_axis(axis_dyn_in_eci));
    axis_reg_array #(.N_STAGES(N_REG_ECI_S0), .DATA_BITS(ECI_DATA_BITS)) inst_eci_out (.aclk(xclk), .aresetn(xresetn), .s_axis(axis_dyn_out_eci), .m_axis(axis_dyn_out_s0));
    dma_reg_array #(.N_STAGES(N_REG_ECI_S0)) inst_eci_dma_rd (.aclk(xclk), .aresetn(xresetn), .s_req(dma_rd_req_s0), .m_req(dma_rd_req_eci));
    dma_reg_array #(.N_STAGES(N_REG_ECI_S0)) inst_eci_dma_wr (.aclk(xclk), .aresetn(xresetn), .s_req(dma_wr_req_s0), .m_req(dma_wr_req_eci));
        
    // Command adjustments
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_out_s1 ();
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_in_s1 ();
    dmaIntf dma_rd_req_s1 ();
    dmaIntf dma_wr_req_s1 ();

    eci_adj inst_eci_adj (
        .aclk(xclk),
        .aresetn(xresetn),
        .s_rdCDMA(dma_rd_req_s1),
        .m_rdCDMA(dma_rd_req_s0),
        .s_wrCDMA(dma_wr_req_s1),
        .m_wrCDMA(dma_wr_req_s0),
        .s_axis_rd(axis_dyn_out_s0),
        .m_axis_rd(axis_dyn_out_s1),
        .s_axis_wr(axis_dyn_in_s1),
        .m_axis_wr(axis_dyn_in_s0)
    );

    // Stage 1
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_out_arb ();
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_in_arb ();
    dmaIntf dma_rd_req_arb ();
    dmaIntf dma_wr_req_arb ();
    
    axis_reg_array #(.N_STAGES(N_REG_ECI_S1), .DATA_BITS(ECI_DATA_BITS)) inst_adj_in  (.aclk(xclk), .aresetn(xresetn), .s_axis(axis_dyn_in_arb), .m_axis(axis_dyn_in_s1));
    axis_reg_array #(.N_STAGES(N_REG_ECI_S1), .DATA_BITS(ECI_DATA_BITS)) inst_adj_out (.aclk(xclk), .aresetn(xresetn), .s_axis(axis_dyn_out_s1), .m_axis(axis_dyn_out_arb));
    dma_reg_array #(.N_STAGES(N_REG_ECI_S1)) inst_adj_dma_rd (.aclk(xclk), .aresetn(xresetn), .s_req(dma_rd_req_arb), .m_req(dma_rd_req_s1));
    dma_reg_array #(.N_STAGES(N_REG_ECI_S1)) inst_adj_dma_wr (.aclk(xclk), .aresetn(xresetn), .s_req(dma_wr_req_arb), .m_req(dma_wr_req_s1));

    // Arbitration
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_out_main [N_CHAN] ();
    AXI4S #(.AXI4S_DATA_BITS(ECI_DATA_BITS)) axis_dyn_in_main [N_CHAN] ();

    eci_arbiter_top inst_eci_arbiter (
        .aclk(xclk),
        .aresetn(xresetn),
        .req_rd_snk(dma_rd_req_int),
        .req_rd_src(dma_rd_req_arb),
        .axis_rd_data_snk(axis_dyn_out_arb),
        .axis_rd_data_src(axis_dyn_out_main),
        .req_wr_snk(dma_wr_req_int),
        .req_wr_src(dma_wr_req_arb),
        .axis_wr_data_snk(axis_dyn_in_main),
        .axis_wr_data_src(axis_dyn_in_arb)
    );

    // Width conversion
    for(genvar i = 0; i < N_CHAN; i++) begin
        axis_dwidth_user_net inst_eci_user_cnvrt (
            .aclk(xclk),
            .aresetn(xresetn),
            .s_axis_tvalid(axis_dyn_out_main[i].tvalid),
            .s_axis_tready(axis_dyn_out_main[i].tready),
            .s_axis_tdata(axis_dyn_out_main[i].tdata),
            .s_axis_tkeep(axis_dyn_out_main[i].tkeep),
            .s_axis_tlast(axis_dyn_out_main[i].tlast),
            .m_axis_tvalid(axis_dyn_out_int[i].tvalid),
            .m_axis_tready(axis_dyn_out_int[i].tready),
            .m_axis_tdata(axis_dyn_out_int[i].tdata),
            .m_axis_tkeep(axis_dyn_out_int[i].tkeep),
            .m_axis_tlast(axis_dyn_out_int[i].tlast)
        );
        
        axis_dwidth_net_user inst_user_eci_cnvrt (
            .aclk(xclk),
            .aresetn(xresetn),
            .s_axis_tvalid(axis_dyn_in_int[i].tvalid),
            .s_axis_tready(axis_dyn_in_int[i].tready),
            .s_axis_tdata(axis_dyn_in_int[i].tdata),
            .s_axis_tkeep(axis_dyn_in_int[i].tkeep),
            .s_axis_tlast(axis_dyn_in_int[i].tlast),
            .m_axis_tvalid(axis_dyn_in_main[i].tvalid),
            .m_axis_tready(axis_dyn_in_main[i].tready),
            .m_axis_tdata(axis_dyn_in_main[i].tdata),
            .m_axis_tkeep(axis_dyn_in_main[i].tkeep),
            .m_axis_tlast(axis_dyn_in_main[i].tlast)
        );
    end
	
    // -----------------------------------------------------------------
    // SHELL
    // -----------------------------------------------------------------
    `include "top_shell.svh"
        
endmodule