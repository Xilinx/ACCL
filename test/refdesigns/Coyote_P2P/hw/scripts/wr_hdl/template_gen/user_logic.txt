`timescale 1ns / 1ps

import lynxTypes::*;

`include "axi_macros.svh"
`include "lynx_macros.svh"

/**
 * User logic
 * 
 */
module design_user_logic_c{{ c_cnfg }}_{{ c_reg }} (
    // AXI4L CONTROL
    AXI4L.s                     axi_ctrl,

{% if cnfg.en_bpss %}
    // DESCRIPTOR BYPASS
    metaIntf.m			        bpss_rd_req,
    metaIntf.m			        bpss_wr_req,
    metaIntf.s                  bpss_rd_done,
    metaIntf.s                  bpss_wr_done,

{% endif %}
{% if cnfg.en_strm %}
    // AXI4S HOST STREAMS
    {% for i in range(0, cnfg.n_strm_axi) %}
    AXI4SR.s                    axis_host_{{i}}_sink,
    AXI4SR.m                    axis_host_{{i}}_src,
    {% endfor %}

{% endif %}
{% if cnfg.en_mem %}
    // AXI4S CARD STREAMS
    {% for i in range(0, cnfg.n_card_axi) %}
    AXI4SR.s                    axis_card_{{i}}_sink,
    AXI4SR.m                    axis_card_{{i}}_src,
    {% endfor %}

    
{% endif %}
{% if cnfg.en_rdma_0 %}
    // RDMA QSFP0 CMD
    metaIntf.s			        rdma_0_rd_req,
    metaIntf.s 			        rdma_0_wr_req,

    // AXI4S RDMA QSFP0 STREAMS
    AXI4SR.s                    axis_rdma_0_sink,
    AXI4SR.m                    axis_rdma_0_src,

{% if cnfg.en_rpc %}
    // RDMA QSFP0 SQ and RQ
    metaIntf.m 			        rdma_0_sq,
    // metaIntf.s 			    rdma_0_rq,
    metaIntf.s                  rdma_0_ack,

{% endif %}
{% endif %}
{% if cnfg.en_rdma_1 %}
    // RDMA QSFP1 CMD
    metaIntf.s			        rdma_1_rd_req,
    metaIntf.s 			        rdma_1_wr_req,

    // AXI4S RDMA QSFP1 STREAMS
    AXI4SR.s                    axis_rdma_1_sink,
    AXI4SR.m                    axis_rdma_1_src,

{% if cnfg.en_rpc %}
    // RDMA QSFP1 SQ and RQ
    metaIntf.m 			        rdma_1_sq,
    //metaIntf.s 			    rdma_1_rq,
    metaIntf.s                  rdma_1_ack,

{% endif %}
{% endif %}
{% if cnfg.en_tcp_0 %}
    // TCP/IP QSFP0 CMD
    metaIntf.s			        tcp_0_notify,
    metaIntf.m			        tcp_0_rd_pkg,
    metaIntf.s			        tcp_0_rx_meta,
    metaIntf.m			        tcp_0_tx_meta,
    metaIntf.s			        tcp_0_tx_stat,

    // AXI4S TCP/IP QSFP0 STREAMS
    AXI4SR.s                    axis_tcp_0_sink,
    AXI4SR.m                    axis_tcp_0_src,

{% endif %}
{% if cnfg.en_tcp_1 %}
    // TCP/IP QSFP1 CMD
    metaIntf.s			        tcp_1_notify,
    metaIntf.m			        tcp_1_rd_pkg,
    metaIntf.s			        tcp_1_rx_meta,
    metaIntf.m			        tcp_1_tx_meta,
    metaIntf.s			        tcp_1_tx_stat,

    // AXI4S TCP/IP QSFP1 STREAMS
    AXI4SR.s                    axis_tcp_1_sink, 
    AXI4SR.m                    axis_tcp_1_src,

{% endif %}
    // Clock and reset
    input  wire                 aclk,
    input  wire[0:0]            aresetn
);

/* -- Tie-off unused interfaces and signals ----------------------------- */
//always_comb axi_ctrl.tie_off_s();
{% if cnfg.en_bpss %}
//always_comb bpss_rd_req.tie_off_m();
//always_comb bpss_wr_req.tie_off_m();
//always_comb bpss_rd_done.tie_off_s();
//always_comb bpss_wr_done.tie_off_s();
{% endif %}
{% if cnfg.en_strm %}
{% for i in range(0, cnfg.n_strm_axi) %}
//always_comb axis_host_{{i}}_sink.tie_off_s();
//always_comb axis_host_{{i}}_src.tie_off_m();
{% endfor %}
{% endif %}
{% if cnfg.en_mem %}
{% for i in range(0, cnfg.n_card_axi) %}
//  always_comb axis_card_{{i}}_sink.tie_off_s();
//  always_comb axis_card_{{i}}_src.tie_off_m();
{% endfor %}
{% endif %}
{% if cnfg.en_rdma_0 %}	
//always_comb rdma_0_rd_req.tie_off_s();
//always_comb rdma_0_wr_req.tie_off_s();
//always_comb axis_rdma_0_sink.tie_off_s();
//always_comb axis_rdma_0_src.tie_off_m();
{% if cnfg.en_rpc %}
//always_comb rdma_0_sq.tie_off_m();
//always_comb rdma_0_ack.tie_off_s();
{% endif %}
{% endif %}
{% if cnfg.en_rdma_1 %}	
//always_comb rdma_1_rd_req.tie_off_s();
//always_comb rdma_1_wr_req.tie_off_s();
//always_comb axis_rdma_1_sink.tie_off_s();
//always_comb axis_rdma_1_src.tie_off_m();
{% if cnfg.en_rpc %}
//always_comb rdma_1_sq.tie_off_m();
//always_comb rdma_1_ack.tie_off_s();
{% endif %}
{% endif %}
{% if cnfg.en_tcp_0 %}
//always_comb tcp_0_notify.tie_off_s();
//always_comb tcp_0_rd_pkg.tie_off_m();
//always_comb tcp_0_rx_meta.tie_off_s();
//always_comb tcp_0_tx_meta.tie_off_m();
//always_comb tcp_0_tx_stat.tie_off_s();
//always_comb axis_tcp_0_sink.tie_off_s();
//always_comb axis_tcp_0_src.tie_off_m();
{% endif %}
{% if cnfg.en_tcp_1 %}
//always_comb tcp_1_notify.tie_off_s();
//always_comb tcp_1_rd_pkg.tie_off_m();
//always_comb tcp_1_rx_meta.tie_off_s();
//always_comb tcp_1_tx_meta.tie_off_m();
//always_comb tcp_1_tx_stat.tie_off_s();
//always_comb axis_tcp_1_sink.tie_off_s();
//always_comb axis_tcp_1_src.tie_off_m();
{% endif %}

/* -- USER LOGIC -------------------------------------------------------- */



endmodule